#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 29 19:09:39 2019

@author: admin
"""

import os 
import pandas as pd
import re
from bs4 import BeautifulSoup as bs
import requests
import urllib.request
from datetime import datetime as dt
from dateutil.parser import parse
#oepn the txt file and dump into list
#Change the workign directory
dir1 = '/Users/admin/Blog_Data/Cawledge_Hawkey/Raw_Data/Calledge_Hawkey'
os.chdir(dir1)


with open ('d1m_1920_boxscoreurl.txt','r') as bs_urls_1920:
    url_list=bs_urls_1920.readlines()
    
''' This fuction will take in the url, access the page, pull out the required data,
    determien the winner and loser and the home/away team, and spit out the data
    in pd-Dataframe series for assembly into a dataframe object list(list())'''
    
def winner(scoringDict,home,away):
    if scoringDict[home] > scoringDict[away]:
        resultW = 'Home Team'
        resultL = 'Away Team'
    elif scoringDict[home] < scoringDict[away]:
        resultW = 'Away Team'
        resultL = 'Home Team'
    else:
        resultW = resultL = 'Tie'
    return resultW, resultL

def team_location(teamLoc_str):
    #Find the target between first team abbreviation and capital letter
    teamLocation = []
    detStr = re.search('(?<=\)).*?(?=[A-Z])',teamLoc_str).group(0).strip()
    if detStr == 'at':
        away = re.search('^.*?(?=\()',teamLoc_str).group(0).strip()
        home = re.search('(?<=\sat\s).*?(?=\()',teamLoc_str).group(0).strip()
        teamLocation.append(away)
        teamLocation.append(home)
        #gameType = 'home/away game'
    elif detStr == 'vs':
        tourneyTeam1 = re.search('^.*?(?=\()',teamLoc_str).group(0).strip()
        tourneyTeam2 = re.search('(?<=\svs\s).*?(?=\()',teamLoc_str).group(0).strip()
        teamLocation.append(tourneyTeam1)
        teamLocation.append(tourneyTeam2)
        #gameType = 'Tournament Game'
    else:
        print('The string is not matched correctly!')
        away = 'none'
        home = 'none'
        teamLocation.append(away)
        teamLocation.append(home)
    return teamLocation

def score_assignment(scores):
    #This function takes in a list of scores
    #and outputs a dictionary with teamname:score
    teamScore_pattern = '^.*?(?=\s\d)'
    Score_pattern     = '(?<=\s\w)*\d'  
    values=[]
    score_keys=[]
    for score in scores:
        keys=len(scores)
        score_team = re.search(teamScore_pattern,score).group(0).strip()
        score_int  = int(re.search(Score_pattern,score).group(0).strip())
        values.append(score_int)
        score_keys.append(score_team)
    score_dict= {k:v for k,v in zip(score_keys,values)}
    return score_dict   
url_list.remove('http://www.collegehockeystats.net/1920/boxes/mbu_cnq1.d29\n')
 #This is required as there is a team with double
                               #paratheses
                               
def hockeyStatsDF(url_list):
    #Panda Series to update
    #Pd Series
    date = []
    day = []
    startTime = []
    endTime = []
    totalTime_min = []
    attendance = []
    home = []
    away = []
    game_type = []
    homescore = []
    awayscore = []
    winningTeam = []
    losingTeam = []
    
    iteration = 0
    #Access the page
    for url in url_list:
        iteration +=1
        urlPage = url[:-1]
        req_1 = requests.get(urlPage) #Get Url
        
        req1Bs = bs(req_1.text)
        
        #Get the header information
        target_data = req1Bs.div.p

        #Create a list of the data
        date_vs = target_data.b.text.split(',')
        year_type = date_vs[2].split('\n')
        attendance_gameTime = target_data.p.parent.next_sibling.text
        b_targets = target_data.p.parent.next_sibling.text

        
        # Pull the time data
        start_time = re.search('(?<=Start Time:)(.*?)(?=&nbsp\sEnd Time)',b_targets).group(0).strip()
        end_time   = re.search('(?<=End Time:)(.*?)(?=&nbsp\sTotal Time)',b_targets).group(0).strip()
        total_time = re.search('(?<=Total Time:).*\w',b_targets).group(0).strip()
        
        #convert the date to time
        startTime_dt = dt.strptime(start_time,'%I:%M %p')
        endTime_dt = dt.strptime(end_time,'%I:%M %p')
        totalTime = dt.strptime(total_time,'%H:%M')
        totalTime_minutes = totalTime.hour*60 +totalTime.minute
        
        #Pull the dayOfweek and dayOfyear data
        dayOfweek = date_vs[0]
        dayOfyear= date_vs[1].lstrip()
        year = year_type[0].strip()
        
        #Get the dt data
        date_strp = dayOfyear + ' '+ year
        #dateStr = parse(date_strp)
        
        #finalscorelists
        final_score = target_data.p.b.text
        finalScore_list = re.split(': |,',final_score)
        
        #attendance data
        attendance_int = int(re.search('(?<=Attendance:).*\d',attendance_gameTime).group(0).strip())
        
        #Home/Away/GameType
        game_typeStr = year_type[2].strip()
        teamLocStr = year_type[1]
        
        #Run the teamlocation function
        teamLoc = team_location(teamLocStr)
        away_team = teamLoc[0]
        home_team = teamLoc[1]
        #run the functions to get the winners/losers and socre
        game_url= score_assignment(finalScore_list)
        w_l = winner(game_url,home_team,away_team)
        
        winningTeam_str = w_l[0]
        losingTeam_str  = w_l[1]
        homescoreStr = game_url[home_team]
        awayscoreStr = game_url[away_team]
        #Append the empty lists
        date.append(date_strp)
        day.append(dayOfweek)
        startTime.append(startTime_dt)
        endTime.append(endTime_dt)
        totalTime_min.append(totalTime_minutes)
        attendance.append(attendance_int)
        home.append(home_team)
        away.append(away_team)
        game_type.append(game_typeStr)
        homescore.append(homescoreStr )
        awayscore.append(awayscoreStr)
        winningTeam.append(winningTeam_str)
        losingTeam.append(losingTeam_str)
        
        #Create the dataframe
    return date,day,startTime,endTime,totalTime_min,attendance,home,away,game_type,homescore,awayscore,winningTeam,losingTeam

    
